@{
    ViewData["Title"] = "Conta corrente";
    ViewData["LOGIC"] = "UWP";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@await Html.PartialAsync("~/Views/App/Manage/Sistema/_ManageNav.cshtml")
<div class="inner-content">
    <div class="toolbar">
        <div class="left">
            <h2>Conta corrente</h2>
        </div>
        <div class="right">
            <a asp-action="Criar" class="btn"><i class="fa fa-plus"></i> Criar nova</a>
        </div>
        <div class="clean"></div>
    </div>
    @(Html.Kendo().Grid<ProjectCachoeiro.Web.Models.Comercial.ContaCorrente>()
                                            .Name("Contas").Columns(col =>
                                            {
                                                col.Bound(c => c.Titulo);
                                                col.Bound(c => c.Banco);
                                                col.Bound(c => c.IBAN);
                                                col.Bound(c => c.Swift);
                                                col.Bound(p => p.Id).ClientTemplate(@"
                                        <a class='k-button k-button-icontext k-grid-Edit' href='/ContaCorrentes/Editar/#=Id#'>
                                            <span class='k-icon k-i-hyperlink-open'></span> Editar
                                        </a>
                                        <a class='k-button k-button-icontext k-grid-Details' href='/ContaCorrentes/Detalhes/#=Id#'>
                                            <span class='k-icon k-i-hyperlink'></span> Mais
                                        </a>").Title("Opções").Width(189).Editable("noEdit")
                                                    .Filterable(false).HtmlAttributes(new { @style = "padding-right:0" });
                                                col.Command(command =>
                                                {
                                                    command.Destroy().Text("Apagar");
                                                }).Width(100).HtmlAttributes(new { @style = "padding-left:0" });
                                            })
                                            .Sortable().Filterable(mess =>
                                            {
                                                mess.Operators(ope =>
                                                {
                                                    ope.ForDate(str => str.IsNull("é nulo").IsNotNull("não é nulo").IsNotEqualTo("não é igual a").IsLessThanOrEqualTo("é menor ou igual").IsLessThan("é menor que").IsGreaterThanOrEqualTo("é maior ou igual a").IsGreaterThan("é maior que").IsEqualTo("é igual a"));
                                                    ope.ForEnums(str => str.IsNull("é nulo").IsNotNull("não é nulo").IsNotEqualTo("não é igual a").IsEqualTo("é igual a"));
                                                    ope.ForNumber(str => str.IsNull("é nulo").IsNotNull("não é nulo").IsNotEqualTo("não é igual a").IsLessThanOrEqualTo("é menor ou igual").IsLessThan("é menor que").IsGreaterThanOrEqualTo("é maior ou igual a").IsGreaterThan("é maior que").IsEqualTo("é igual a"));
                                                    ope.ForString(str => str.StartsWith("começa com").Contains("contem").DoesNotContain("não contem").EndsWith("termina com").IsNull("é nulo").IsNotNull("não é nulo").IsNotEqualTo("não é igual a").IsNotEmpty("não em branco").IsEqualTo("é igual a").IsNotEqualTo("não é igual a").IsEmpty("esta em branco"));
                                                });
                                                mess.Messages(c => { c.Clear("Limpar"); c.And("e"); c.Cancel("Cancelar"); c.IsFalse("é falso"); c.IsTrue("é verdadeiro"); c.Or("ou"); c.Search("Pesquisar"); c.SelectValue("Selecionar valor"); c.Filter("Filtrar"); c.SelectValue("Selecionar"); c.Info("Mostrar itens que"); });
                                            })
                                            .Pageable(page => page.Refresh(true).ButtonCount(5)
                                                .Messages(c =>
                                                {
                                                    c.ItemsPerPage("Itens por página");
                                                    c.Last("Último");
                                                    c.Next("Próximo");
                                                    c.First("Primeira");
                                                    c.Refresh("Recarregar");
                                                    c.Display("{0} - {1} de {2} itens");
                                                })).Editable(e => e.Mode(GridEditMode.InCell)).Events(ev => ev.CellClose("CellCloseScript"))
                                            .DataSource(data => data.Ajax().ServerOperation(false).Batch(true).Events(events => events.Error("error_handler")).Model(model => model.Id(p => p.Id))
                                                .Read(read => read.Action("Read", "ContaCorrentes"))
                                                .Update("Update", "ContaCorrentes")
                                                .Destroy("Destroy", "ContaCorrentes")))
</div>
<script>
    function noEdit(dataItem) {
        return dataItem.Id == 0;
    }
    function CellCloseScript(e) {
        this.dataSource.sync()
    }
</script>