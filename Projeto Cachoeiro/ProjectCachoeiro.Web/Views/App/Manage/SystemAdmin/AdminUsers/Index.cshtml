@model IEnumerable<ProjectCachoeiro.Web.Models.ApplicationUser>
@using System.Linq
@{
    ViewData["Title"] = "Usuários administradores";
    ViewData["LOGIC"] = "UWP";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="row">
    <div class="col-md-9">
        <div class="view-element">
            <div class="toolbar">
                <div class="left">
                    <h2>Usuários administradores</h2>
                </div>
                <div class="right">
                    <a asp-action="Criar" class="btn"><i class="fa fa-plus"></i> Criar novo</a>
                </div>
                <div class="clean"></div>
            </div>
            @(Html.Kendo().Grid<ProjectCachoeiro.Web.Models.ApplicationUser>()
                    .Name("ApplicationUser").Columns(col =>
                    {
                        col.Bound(c => c.NomeCompleto).Title("Nome").Width(240);
                        col.Bound(c => c.CPF);
                        col.Bound(c => c.Email);
                        col.Bound(p => p.Id).ClientTemplate(@"
                            <a class='k-button k-button-icontext k-grid-Edit' href='/AdminUsers/Editar/#=Id#'>
                                <span class='k-icon k-i-hyperlink-open'></span> Editar
                            </a>
                            <a class='k-button k-button-icontext k-grid-Details' href='/AdminUsers/Detalhes/#=Id#'>
                                <span class='k-icon k-i-hyperlink'></span> Mais
                            </a>").Title("Opções").Width(189).Editable("noEdit").Filterable(false).HtmlAttributes(new { @style = "padding-right:0" });
                        col.Command(command =>
                        {
                            command.Destroy().Text("Apagar");
                        }).Width(100).HtmlAttributes(new { @style = "padding-left:0" });
                    })
                    .Sortable().Filterable(mess =>
                    {
                        mess.Operators(ope =>
                        {
                            ope.ForDate(str => str.IsNull("é nulo").IsNotNull("não é nulo").IsNotEqualTo("não é igual a").IsLessThanOrEqualTo("é menor ou igual").IsLessThan("é menor que").IsGreaterThanOrEqualTo("é maior ou igual a").IsGreaterThan("é maior que").IsEqualTo("é igual a"));
                            ope.ForEnums(str => str.IsNull("é nulo").IsNotNull("não é nulo").IsNotEqualTo("não é igual a").IsEqualTo("é igual a"));
                            ope.ForNumber(str => str.IsNull("é nulo").IsNotNull("não é nulo").IsNotEqualTo("não é igual a").IsLessThanOrEqualTo("é menor ou igual").IsLessThan("é menor que").IsGreaterThanOrEqualTo("é maior ou igual a").IsGreaterThan("é maior que").IsEqualTo("é igual a"));
                            ope.ForString(str => str.StartsWith("começa com").Contains("contem").DoesNotContain("não contem").EndsWith("termina com").IsNull("é nulo").IsNotNull("não é nulo").IsNotEqualTo("não é igual a").IsNotEmpty("não em branco").IsEqualTo("é igual a").IsNotEqualTo("não é igual a").IsEmpty("esta em branco"));
                        });
                        mess.Messages(c => { c.Clear("Limpar"); c.And("e"); c.Cancel("Cancelar"); c.IsFalse("é falso"); c.IsTrue("é verdadeiro"); c.Or("ou"); c.Search("Pesquisar"); c.SelectValue("Selecionar valor"); c.Filter("Filtrar"); c.SelectValue("Selecionar"); c.Info("Mostrar itens que"); });
                    })
                    .Pageable(page => page.Refresh(true).PageSizes(true).ButtonCount(5)
                        .Messages(c =>
                        {
                            c.ItemsPerPage("Itens por página");
                            c.Last("Último");
                            c.Next("Próximo");
                            c.First("Primeira");
                            c.Refresh("Recarregar");
                            c.Display("{0} - {1} de {2} itens");
                        }))
                    .DataSource(data => data.Ajax().ServerOperation(false).Events(events => events.Error("error_handler")).Model(model => model.Id(p => p.Id))
                        .Read(read => read.Action("Read", "AdminUsers"))
                        .Destroy("Destroy", "AdminUsers")))
            <!-- TODO: Editar e Mais detalhes não estão funcionando-->
        </div>
    </div>
    <div class="info-bar col-md-3">
        @{
            OtherOptions otherOptions = new OtherOptions
            {
                Descricao = "Veja opções relacionadas com a apresentação de itens.",
                FeedbackEChamadoID = "ItemFamilia",
                OpcoesRelacionadas = new Links[] {
                    new Links{
                        Titulo = "Adicionar família",
                        Url = "/Familias/Create"
                    },
                    new Links{
                        Titulo = "Adicionar estado de produto",
                        Url = "/Estados/Create"
                    },
                    new Links{
                        Titulo = "Adicionar produto",
                        Url = "/Produtos/Create"
                    }
                }
            };
        }
        @Html.Partial("AppOtherOptions", otherOptions)
    </div>
</div>
<script>
    function noEdit(dataItem) {
        return dataItem.Id == 0;
    }
    function CellCloseScript(e) {
        this.dataSource.sync()
    }
</script>