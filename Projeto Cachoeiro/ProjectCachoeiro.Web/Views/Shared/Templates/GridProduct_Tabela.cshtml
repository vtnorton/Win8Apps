@using ProjectCachoeiro.Web.Extensions
@model string;
@{ 
    //"CONTROLLER:NomeDoControler;ACTION:NomeDaAction;ID:IdDerivacao;TRANFORMAR:Off/On;DETAILS:True/False;"
    int _id = int.Parse(Model.GetBetween("ID:", ";"));
    bool _transformar = Model.GetBetween("TRANFORMAR:", ";") == "On";
    bool _details = Model.GetBetween("DETAILS:", ";") == "True";
    string _controller = Model.GetBetween("CONTROLLER:", ";");
    string _action = Model.GetBetween("ACTION:", ";");
    string _clientDetailTemplateId = _transformar ? "TemplateDetalhesTransformar" : "TemplateDetalhesIndividual";
    string _noRecordTemplateId = _details ? "NoRecord" : "NoRecordAddOne";
}

@(Html.Kendo().Grid<ProjectCachoeiro.Web.Models.Produtos.Produto>()
    .Name("Produtos").Columns(col =>
    {
        col.Bound(c => c.GetName).Title("Nome");
        col.ForeignKey(c => c.IdStatus, (System.Collections.IEnumerable)ViewData["estado"], "Id", "Nome").Title("Estado");
        col.ForeignKey(c => c.IdMaterial, (System.Collections.IEnumerable)ViewData["material"], "Id", "Nome").Title("Material");
        col.ForeignKey(c => c.IdTipo, (System.Collections.IEnumerable)ViewData["tipo"], "Id", "Nome").Title("Tipo");
        col.Bound(c => c.DisponivelEmEstoque).Title("Disponibilidade").ClientTemplate("# if (data.DisponivelEmEstoque) { # Disponível #}else{ # Indisponível # } #");
        //TODO: Colocar metragem 
        col.Bound(p => p.Id).ClientTemplate("<a class='k-button k-button-icontext k-grid-Details' href='/Produtos/Detalhes/#=Id#'><span class='k-icon k-i-hyperlink'></span> Mais</a>").Title("Opções").Width(115).Editable("noEdit");
    }).Sortable().Navigatable().Filterable(mess =>
    {
        mess.Operators(ope =>
        {
            ope.ForDate(str => str.IsNull("é nulo").IsNotNull("não é nulo").IsNotEqualTo("não é igual a").IsLessThanOrEqualTo("é menor ou igual").IsLessThan("é menor que").IsGreaterThanOrEqualTo("é maior ou igual a").IsGreaterThan("é maior que").IsEqualTo("é igual a"));
            ope.ForEnums(str => str.IsNull("é nulo").IsNotNull("não é nulo").IsNotEqualTo("não é igual a").IsEqualTo("é igual a"));
            ope.ForNumber(str => str.IsNull("é nulo").IsNotNull("não é nulo").IsNotEqualTo("não é igual a").IsLessThanOrEqualTo("é menor ou igual").IsLessThan("é menor que").IsGreaterThanOrEqualTo("é maior ou igual a").IsGreaterThan("é maior que").IsEqualTo("é igual a"));
            ope.ForString(str => str.StartsWith("começa com").Contains("contem").DoesNotContain("não contem").EndsWith("termina com").IsNull("é nulo").IsNotNull("não é nulo").IsNotEqualTo("não é igual a").IsNotEmpty("não em branco").IsEqualTo("é igual a").IsNotEqualTo("não é igual a").IsEmpty("esta em branco"));
        });
        mess.Messages(c => { c.Clear("Limpar"); c.And("e"); c.Cancel("Cancelar"); c.IsFalse("é falso"); c.IsTrue("é verdadeiro"); c.Or("ou"); c.Search("Pesquisar"); c.SelectValue("Selecionar valor"); c.Filter("Filtrar"); c.SelectValue("Selecionar"); c.Info("Mostrar itens que"); });
    }).ClientDetailTemplateId(_clientDetailTemplateId)
      .ToolBar(t => t.Pdf().Text("Exportar para PDF")).NoRecords(n => n.TemplateId(_noRecordTemplateId))
      .Editable(e => e.Mode(GridEditMode.InCell)).Events(ev => ev.CellClose("CellCloseScript"))
      .Pageable(page => page.Refresh(true).ButtonCount(5)
                .Messages(c => {
                    c.ItemsPerPage("Itens por página");
                    c.Last("Último");
                    c.Next("Próximo");
                    c.First("Primeira");
                    c.Refresh("Recarregar");
                    c.Display("{0} - {1} de {2} itens");
                }))
      .DataSource(data => data.Ajax().PageSize(20).ServerOperation(false).Batch(true)
        .Events(events => events.Error("error_handler"))
        .Model(model => model.Id(p => p.Id))
        .Update("ProductDetails_UpdateAsync", "ProductDetails")
        .Read(read => read.Action(_action, _controller, new { Id = _id }))
     )
)

<script>
    function noEdit(dataItem) {
        return dataItem.Id == 0;
    }
    function CellCloseScript(e) {
        this.dataSource.sync()
    }
</script>

@await Html.PartialAsync("~/Views/Shared/Templates/GridProduct_DetalhesTransformacao.cshtml")

<script id="NoRecordAddOne" type="text/x-kendo-template">
    <div style="padding:20px 50px">
        <p class="text-center">Não há nenhum produto cadastrado aqui. Você pode adicionar novos produtos pelo botão abaixo.</p>
        <br />
        <a href="/Produtos/Criar" class="btn"><i class="fa fa-plus-square-o"></i> Criar produto</a>
        <br />
    </div>
</script>

@{ 
    //TODO: Se possuir derivados abrir a lista de derivados embaixo
    //TODO: Editable não está salvando
}