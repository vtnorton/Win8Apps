@model ProjectCachoeiro.Web.Comercial.Cliente
@{
    ViewData["Title"] = @Html.DisplayFor(model => model.GetName);
    ViewData["LOGIC"] = "UWP";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-md-9">
        <div class="toolbar">
            <div class="left">
                <h2>@Html.DisplayFor(model => model.GetName)</h2>
            </div>
            <div class="right">
                <a class="btn" href="/Clientes/Criar"><i class="fa fa-plus"></i> Novo</a>
            </div>
            <div class="clean"></div>
        </div>
        <div class="view-element">
            <div class="row">
                <div class="col-md-7 col-sm-6">
                    <div class="left">
                        <span class="image-wrapper">
                            @*<img src="# if (sessionStorage.getItem(EmployeeID)) {#data:image/png;base64,#:sessionStorage.getItem(EmployeeID)# # } else {#@(Url.Content("Contacts/Picture/"))#:EmployeeID# # } #" alt="#:EmployeeID # image" />*@
                        </span>
                    </div>
                    <div class="right contact-info">
                        <h4>Detalhes</h4>
                        <p>Veja detalhes de contato, como telefone, e-mail e endereço comercial da empresa @Model.GetName</p>
                    </div>
                    <div class="clean"></div>
                    <div class="row">
                        <div class="col-md-6">
                            @if (!string.IsNullOrEmpty(Model.Telefone))
                            {
                                <p><span class="small">Telefone</span><br />@Html.DisplayFor(model => model.Telefone)</p>
                            }
                            @if (!string.IsNullOrEmpty(Model.Fax))
                            {
                                <p><span class="small">Fax empresarial</span><br />@Html.DisplayFor(model => model.Fax)</p>
                            }
                            @if (!string.IsNullOrEmpty(Model.EmailContato))
                            {
                                <p><span class="small">Email de contato</span><br />@Html.DisplayFor(model => model.EmailContato)</p>
                            }
                            @if (!string.IsNullOrEmpty(Model.Site))
                            {
                                <p><span class="small">Endereço do site</span><br />@Html.DisplayFor(model => model.Site)</p>
                            }
                        </div>
                        <div class="col-md-6">
                            @if (!string.IsNullOrEmpty(Model.Pais))
                            {
                                <p><span class="small">País</span><br />@Html.DisplayFor(model => model.Pais)</p>
                            }
                            @if (!string.IsNullOrEmpty(Model.Cidade))
                            {
                                <p><span class="small">Cidade</span><br />@Html.DisplayFor(model => model.Cidade)</p>
                            }
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            @if (!string.IsNullOrEmpty(Model.Endereco))
                            {
                                <p><span class="small">Endereco da empresa</span><br />@Html.DisplayFor(model => model.GetEndereco)</p>
                            }
                        </div>
                    </div>
                    <br />
                    <h4>Registros</h4>
                    <p>Conheça os detalhes do cadastro e de possíveis alterações realizadas neste item.</p>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.DateCreated)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.DateCreated)
                        </dd>
                        <dt>
                            @Html.DisplayNameFor(model => model.UserCreated)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.UserCreated)
                        </dd>
                        <dt>
                            @Html.DisplayNameFor(model => model.DateModified)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.DateModified)
                        </dd>
                        <dt>
                            @Html.DisplayNameFor(model => model.UserModified)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.UserModified)
                        </dd>
                    </dl>
                    <div class="clean"></div>
                </div>
                <div class="col-md-5 col-sm-6">
                    @if (!string.IsNullOrEmpty(Model.CNPJ))
                    {
                        <h4>Detalhes fiscais</h4>
                        <p>Para empresas nacionais dados como CNPJ e Inscrição Estadual são necessários para o bom funcionamento do sistema.</p>
                        <p><span class="small">CNPJ</span><br />@Html.DisplayFor(model => model.CNPJ)</p>
                        <p><span class="small">Inscrição estadual</span><br />@Html.DisplayFor(model => model.InscricaoEstadual)</p>
                        @if (!string.IsNullOrEmpty(Model.RazaoSocial))
                        {
                            <p><span class="small">Razão Social</span><br />@Html.DisplayFor(model => model.RazaoSocial)</p>
                        }
                    }

                    @if (!string.IsNullOrEmpty(Model.Descricao))
                    {
                        <br />
                        <h4>Descrição</h4>
                        @Html.DisplayFor(model => model.Descricao)
                    }
                </div>
            </div>
            <div class="view-map" id="map"></div>
            @await Html.PartialAsync("~/Views/Shared/AppTaskbar.cshtml", "VIEW;ID=" + Model.Id + ";")
        </div>
        @await Html.PartialAsync("~/Views/Shared/Templates/GridProposta_Tabela.cshtml", "CLIENTE=" + Model.Id + ";")
    </div>
    <div class="info-bar col-md-3">
        @{
            OtherOptions otherOptions = new OtherOptions
            {
                Descricao = "Veja opções relacionadas com " + Model.GetName,
                FeedbackEChamadoID = "DetalhesCliente",
                OpcoesRelacionadas = new Links[] {
                        new Links{
                        Titulo = "Adicionar novo cliente",
                        Url = "/Clientes/Criar"
                    },
                    new Links{
                        Titulo = "Ver lista de clientes",
                        Url = "/Clientes"
                    },
                    new Links{
                        Titulo = "Editar este cliente",
                        Url = "/Clientes/Editar/" + Model.Id
                    }
                }
            };
        }
        @Html.Partial("AppOtherOptions", otherOptions)
    </div>
</div>
<script>
        var address = '@Model.GetEndereco';
        function initMap() {
            geocoder = new google.maps.Geocoder();
            map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: -34.397, lng: 150.644 },
                zoom: 14
            });

            if (geocoder) {
                geocoder.geocode({ 'address': address }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        if (status != google.maps.GeocoderStatus.ZERO_RESULTS) {
                            map.setCenter(results[0].geometry.location);
                            var infowindow = new google.maps.InfoWindow(
                                {
                                    content: '<b>' + address + '</b>',
                                    size: new google.maps.Size(150, 50)
                                });

                            var marker = new google.maps.Marker({
                                position: results[0].geometry.location,
                                map: map,
                                title: address
                            });
                            google.maps.event.addListener(marker, 'click', function () {
                                infowindow.open(map, marker);
                            });

                        }
                    } else {
                        alert("Erro no mapa: tente recadastrar o endereço do cliente.");
                    }
                });
            }
        };
</script>
<script async src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB8OuOHO6KM8RGmWyRvzA9mjdwlVT4VHrk&callback=initMap"></script>
