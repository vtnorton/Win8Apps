using System.Collections.Generic;

namespace DouaiCore.Classes
{
    public class Irregulares
    {
        public static List<string> verboIrregulares()
        {
            List<string> irregulares = new List<string>();

            foreach (var item in listaVerbosIrregulares())
            {
                irregulares.Add(item.Nome);
            }
            return irregulares;
        }

        public static List<VerboIrregular> listaVerbosIrregulares()
        {
            List<VerboIrregular> toReturn = new List<VerboIrregular>();

            toReturn.Add(new VerboIrregular() { Nome = "abaular", Conjugacoes = IrregularesData.Construtor(IrregularesData.abaular) });
            toReturn.Add(new VerboIrregular() { Nome = "abolir", Conjugacoes = IrregularesData.Construtor(IrregularesData.abolir) });
            toReturn.Add(new VerboIrregular() { Nome = "abraçar", Conjugacoes = IrregularesData.Construtor(IrregularesData.abracar) });
            toReturn.Add(new VerboIrregular() { Nome = "abraçar", Conjugacoes = IrregularesData.Construtor(IrregularesData.abracar) });
            toReturn.Add(new VerboIrregular() { Nome = "abrir", Conjugacoes = IrregularesData.Construtor(IrregularesData.abrir) });
            toReturn.Add(new VerboIrregular() { Nome = "acudir", Conjugacoes = IrregularesData.Construtor(IrregularesData.acudir) });
            toReturn.Add(new VerboIrregular() { Nome = "adequar", Conjugacoes = IrregularesData.Construtor(IrregularesData.adequar) });
            //toReturn.Add(new VerboIrregular() { Nome = "adir", Conjugacoes = IrregularesData.Construtor(IrregularesData.adir) });
            toReturn.Add(new VerboIrregular() { Nome = "advertir", Conjugacoes = IrregularesData.Construtor(IrregularesData.advertir) });
            toReturn.Add(new VerboIrregular() { Nome = "advir", Conjugacoes = IrregularesData.Construtor(IrregularesData.advir) });
            toReturn.Add(new VerboIrregular() { Nome = "afligir", Conjugacoes = IrregularesData.Construtor(IrregularesData.afligir) });
            toReturn.Add(new VerboIrregular() { Nome = "agredir", Conjugacoes = IrregularesData.Construtor(IrregularesData.agredir) });
            toReturn.Add(new VerboIrregular() { Nome = "aguar", Conjugacoes = IrregularesData.Construtor(IrregularesData.aguar) });
            //toReturn.Add(new VerboIrregular() { Nome = "aguerrir", Conjugacoes = IrregularesData.Construtor(IrregularesData.aguerrir) });
            toReturn.Add(new VerboIrregular() { Nome = "ajuizar", Conjugacoes = IrregularesData.Construtor(IrregularesData.ajuizar) });
            toReturn.Add(new VerboIrregular() { Nome = "amiudar", Conjugacoes = IrregularesData.Construtor(IrregularesData.amiudar) });
            toReturn.Add(new VerboIrregular() { Nome = "ansiar", Conjugacoes = IrregularesData.Construtor(IrregularesData.ansiar) });
            toReturn.Add(new VerboIrregular() { Nome = "antever", Conjugacoes = IrregularesData.Construtor(IrregularesData.antever) });
            toReturn.Add(new VerboIrregular() { Nome = "antiquar", Conjugacoes = IrregularesData.Construtor(IrregularesData.antiquar) });
            toReturn.Add(new VerboIrregular() { Nome = "apaziguar", Conjugacoes = IrregularesData.Construtor(IrregularesData.apaziguar) });
            toReturn.Add(new VerboIrregular() { Nome = "apaniguar", Conjugacoes = IrregularesData.Construtor(IrregularesData.apaniguar) });
            toReturn.Add(new VerboIrregular() { Nome = "apoiar", Conjugacoes = IrregularesData.Construtor(IrregularesData.apoiar) });
            //toReturn.Add(new VerboIrregular() { Nome = "aprazer", Conjugacoes = IrregularesData.Construtor(IrregularesData.aprazer) });
            toReturn.Add(new VerboIrregular() { Nome = "arguir", Conjugacoes = IrregularesData.Construtor(IrregularesData.arguir) });
            toReturn.Add(new VerboIrregular() { Nome = "arruinar", Conjugacoes = IrregularesData.Construtor(IrregularesData.arruinar) });
            toReturn.Add(new VerboIrregular() { Nome = "atribuir", Conjugacoes = IrregularesData.Construtor(IrregularesData.atribuir) });
            toReturn.Add(new VerboIrregular() { Nome = "assentir", Conjugacoes = IrregularesData.Construtor(IrregularesData.assentir) });
            toReturn.Add(new VerboIrregular() { Nome = "augir", Conjugacoes = IrregularesData.Construtor(IrregularesData.augir) });
            toReturn.Add(new VerboIrregular() { Nome = "averiguar", Conjugacoes = IrregularesData.Construtor(IrregularesData.averiguar) });
            toReturn.Add(new VerboIrregular() { Nome = "avir", Conjugacoes = IrregularesData.Construtor(IrregularesData.avir) });
            toReturn.Add(new VerboIrregular() { Nome = "bem-querer", Conjugacoes = IrregularesData.Construtor(IrregularesData.bemquerer) });
            toReturn.Add(new VerboIrregular() { Nome = "boiar", Conjugacoes = IrregularesData.Construtor(IrregularesData.boiar) });
            toReturn.Add(new VerboIrregular() { Nome = "bulir", Conjugacoes = IrregularesData.Construtor(IrregularesData.bulir) });
            toReturn.Add(new VerboIrregular() { Nome = "caber", Conjugacoes = IrregularesData.Construtor(IrregularesData.caber) });
            toReturn.Add(new VerboIrregular() { Nome = "cair", Conjugacoes = IrregularesData.Construtor(IrregularesData.cair) });
            toReturn.Add(new VerboIrregular() { Nome = "cantar", Conjugacoes = IrregularesData.Construtor(IrregularesData.cantar) });
            toReturn.Add(new VerboIrregular() { Nome = "cegar", Conjugacoes = IrregularesData.Construtor(IrregularesData.cegar) });
            toReturn.Add(new VerboIrregular() { Nome = "cerzir", Conjugacoes = IrregularesData.Construtor(IrregularesData.cerzir) });
            toReturn.Add(new VerboIrregular() { Nome = "chegar", Conjugacoes = IrregularesData.Construtor(IrregularesData.chegar) });
            toReturn.Add(new VerboIrregular() { Nome = "cobrir", Conjugacoes = IrregularesData.Construtor(IrregularesData.cobrir) });
            toReturn.Add(new VerboIrregular() { Nome = "coibir", Conjugacoes = IrregularesData.Construtor(IrregularesData.coibir) });
            //toReturn.Add(new VerboIrregular() { Nome = "colorir", Conjugacoes = IrregularesData.Construtor(IrregularesData.colorir) });
            //toReturn.Add(new VerboIrregular() { Nome = "comedir", Conjugacoes = IrregularesData.Construtor(IrregularesData.comedir) });
            toReturn.Add(new VerboIrregular() { Nome = "comerciar", Conjugacoes = IrregularesData.Construtor(IrregularesData.comerciar) });
            toReturn.Add(new VerboIrregular() { Nome = "compelir", Conjugacoes = IrregularesData.Construtor(IrregularesData.compelir) });
            //toReturn.Add(new VerboIrregular() { Nome = "competir", Conjugacoes = IrregularesData.Construtor(IrregularesData.competir) });
            toReturn.Add(new VerboIrregular() { Nome = "comprazer", Conjugacoes = IrregularesData.Construtor(IrregularesData.comprazer) });
            toReturn.Add(new VerboIrregular() { Nome = "comunicar", Conjugacoes = IrregularesData.Construtor(IrregularesData.comunicar) });
            //toReturn.Add(new VerboIrregular() { Nome = "concernir", Conjugacoes = IrregularesData.Construtor(IrregularesData.concernir) });
            toReturn.Add(new VerboIrregular() { Nome = "conhecer", Conjugacoes = IrregularesData.Construtor(IrregularesData.conhecer) });
            toReturn.Add(new VerboIrregular() { Nome = "conseguir", Conjugacoes = IrregularesData.Construtor(IrregularesData.conseguir) });
            toReturn.Add(new VerboIrregular() { Nome = "consentir", Conjugacoes = IrregularesData.Construtor(IrregularesData.consentir) });
            toReturn.Add(new VerboIrregular() { Nome = "construir", Conjugacoes = IrregularesData.Construtor(IrregularesData.construir) });
            toReturn.Add(new VerboIrregular() { Nome = "consumir", Conjugacoes = IrregularesData.Construtor(IrregularesData.consumir) });
            toReturn.Add(new VerboIrregular() { Nome = "compor", Conjugacoes = IrregularesData.Construtor(IrregularesData.compor) });
            toReturn.Add(new VerboIrregular() { Nome = "compôr", Conjugacoes = IrregularesData.Construtor(IrregularesData.compor) });
            toReturn.Add(new VerboIrregular() { Nome = "conter", Conjugacoes = IrregularesData.Construtor(IrregularesData.conter) });
            toReturn.Add(new VerboIrregular() { Nome = "contiguar", Conjugacoes = IrregularesData.Construtor(IrregularesData.contiguar) });
            toReturn.Add(new VerboIrregular() { Nome = "contravir", Conjugacoes = IrregularesData.Construtor(IrregularesData.contravir) });
            toReturn.Add(new VerboIrregular() { Nome = "convergir", Conjugacoes = IrregularesData.Construtor(IrregularesData.convergir) });
            toReturn.Add(new VerboIrregular() { Nome = "convir", Conjugacoes = IrregularesData.Construtor(IrregularesData.convir) });
            toReturn.Add(new VerboIrregular() { Nome = "corroer", Conjugacoes = IrregularesData.Construtor(IrregularesData.corroer) });
            toReturn.Add(new VerboIrregular() { Nome = "crer", Conjugacoes = IrregularesData.Construtor(IrregularesData.crer) });
            toReturn.Add(new VerboIrregular() { Nome = "cuspir", Conjugacoes = IrregularesData.Construtor(IrregularesData.cuspir) });
            toReturn.Add(new VerboIrregular() { Nome = "dar", Conjugacoes = IrregularesData.Construtor(IrregularesData.dar) });
            toReturn.Add(new VerboIrregular() { Nome = "deflectir", Conjugacoes = IrregularesData.Construtor(IrregularesData.deflectir) });
            //toReturn.Add(new VerboIrregular() { Nome = "demolir", Conjugacoes = IrregularesData.Construtor(IrregularesData.demolir) });
            toReturn.Add(new VerboIrregular() { Nome = "denegrir", Conjugacoes = IrregularesData.Construtor(IrregularesData.denegrir) });
            toReturn.Add(new VerboIrregular() { Nome = "desaguar", Conjugacoes = IrregularesData.Construtor(IrregularesData.desaguar) });
            toReturn.Add(new VerboIrregular() { Nome = "desavir", Conjugacoes = IrregularesData.Construtor(IrregularesData.desavir) });
            toReturn.Add(new VerboIrregular() { Nome = "descaber", Conjugacoes = IrregularesData.Construtor(IrregularesData.descaber) });
            toReturn.Add(new VerboIrregular() { Nome = "descobrir", Conjugacoes = IrregularesData.Construtor(IrregularesData.descobrir) });
            toReturn.Add(new VerboIrregular() { Nome = "desimpedir", Conjugacoes = IrregularesData.Construtor(IrregularesData.desimpedir) });
            toReturn.Add(new VerboIrregular() { Nome = "desmentir", Conjugacoes = IrregularesData.Construtor(IrregularesData.desmentir) });
            toReturn.Add(new VerboIrregular() { Nome = "despedir", Conjugacoes = IrregularesData.Construtor(IrregularesData.despedir) });
            //toReturn.Add(new VerboIrregular() { Nome = "despir", Conjugacoes = IrregularesData.Construtor(IrregularesData.despir) });
            toReturn.Add(new VerboIrregular() { Nome = "desprazer", Conjugacoes = IrregularesData.Construtor(IrregularesData.desprazer) });
            toReturn.Add(new VerboIrregular() { Nome = "desquerer", Conjugacoes = IrregularesData.Construtor(IrregularesData.desquerer) });
            toReturn.Add(new VerboIrregular() { Nome = "destruir", Conjugacoes = IrregularesData.Construtor(IrregularesData.destruir) });
            toReturn.Add(new VerboIrregular() { Nome = "deter", Conjugacoes = IrregularesData.Construtor(IrregularesData.deter) });
            toReturn.Add(new VerboIrregular() { Nome = "devir", Conjugacoes = IrregularesData.Construtor(IrregularesData.devir) });
            //toReturn.Add(new VerboIrregular() { Nome = "discernir", Conjugacoes = IrregularesData.Construtor(IrregularesData.discernir) });
            toReturn.Add(new VerboIrregular() { Nome = "divergir", Conjugacoes = IrregularesData.Construtor(IrregularesData.divergir) });
            toReturn.Add(new VerboIrregular() { Nome = "divertir", Conjugacoes = IrregularesData.Construtor(IrregularesData.divertir) });
            toReturn.Add(new VerboIrregular() { Nome = "dizer", Conjugacoes = IrregularesData.Construtor(IrregularesData.dizer) });
            //toReturn.Add(new VerboIrregular() { Nome = "doer", Conjugacoes = IrregularesData.Construtor(IrregularesData.doer) });
            toReturn.Add(new VerboIrregular() { Nome = "dormir", Conjugacoes = IrregularesData.Construtor(IrregularesData.dormir) });
            toReturn.Add(new VerboIrregular() { Nome = "eclodir", Conjugacoes = IrregularesData.Construtor(IrregularesData.eclodir) });
            //toReturn.Add(new VerboIrregular() { Nome = "embair", Conjugacoes = IrregularesData.Construtor(IrregularesData.embair) });
            //toReturn.Add(new VerboIrregular() { Nome = "empedernir", Conjugacoes = IrregularesData.Construtor(IrregularesData.empedernir) });
            toReturn.Add(new VerboIrregular() { Nome = "encobrir", Conjugacoes = IrregularesData.Construtor(IrregularesData.encobrir) });
            toReturn.Add(new VerboIrregular() { Nome = "engolir", Conjugacoes = IrregularesData.Construtor(IrregularesData.engolir) });
            toReturn.Add(new VerboIrregular() { Nome = "enraizar", Conjugacoes = IrregularesData.Construtor(IrregularesData.enraizar) });
            toReturn.Add(new VerboIrregular() { Nome = "entreter", Conjugacoes = IrregularesData.Construtor(IrregularesData.entreter) });
            toReturn.Add(new VerboIrregular() { Nome = "entupir", Conjugacoes = IrregularesData.Construtor(IrregularesData.entupir) });
            toReturn.Add(new VerboIrregular() { Nome = "enviuvar", Conjugacoes = IrregularesData.Construtor(IrregularesData.enviuvar) });
            toReturn.Add(new VerboIrregular() { Nome = "equivaler", Conjugacoes = IrregularesData.Construtor(IrregularesData.equivaler) });
            toReturn.Add(new VerboIrregular() { Nome = "erguer", Conjugacoes = IrregularesData.Construtor(IrregularesData.erguer) });
            toReturn.Add(new VerboIrregular() { Nome = "escapulir", Conjugacoes = IrregularesData.Construtor(IrregularesData.escapulir) });
            toReturn.Add(new VerboIrregular() { Nome = "escrever", Conjugacoes = IrregularesData.Construtor(IrregularesData.escrever) });
            toReturn.Add(new VerboIrregular() { Nome = "esmiucar", Conjugacoes = IrregularesData.Construtor(IrregularesData.esmiucar) });
            toReturn.Add(new VerboIrregular() { Nome = "esmiuçar", Conjugacoes = IrregularesData.Construtor(IrregularesData.esmiucar) });
            toReturn.Add(new VerboIrregular() { Nome = "espargir", Conjugacoes = IrregularesData.Construtor(IrregularesData.espargir) });
            //toReturn.Add(new VerboIrregular() { Nome = "espavorir", Conjugacoes = IrregularesData.Construtor(IrregularesData.espavorir) });
            toReturn.Add(new VerboIrregular() { Nome = "estar", Conjugacoes = IrregularesData.Construtor(IrregularesData.estar) });
            toReturn.Add(new VerboIrregular() { Nome = "estiar", Conjugacoes = IrregularesData.Construtor(IrregularesData.estiar) });
            toReturn.Add(new VerboIrregular() { Nome = "estrear", Conjugacoes = IrregularesData.Construtor(IrregularesData.estrear) });
            toReturn.Add(new VerboIrregular() { Nome = "expedir", Conjugacoes = IrregularesData.Construtor(IrregularesData.expedir) });
            toReturn.Add(new VerboIrregular() { Nome = "expelir", Conjugacoes = IrregularesData.Construtor(IrregularesData.expelir) });
            //toReturn.Add(new VerboIrregular() { Nome = "explodir", Conjugacoes = IrregularesData.Construtor(IrregularesData.explodir) });
            toReturn.Add(new VerboIrregular() { Nome = "extinguir", Conjugacoes = IrregularesData.Construtor(IrregularesData.extinguir) });
            toReturn.Add(new VerboIrregular() { Nome = "faiscar", Conjugacoes = IrregularesData.Construtor(IrregularesData.faiscar) });
            toReturn.Add(new VerboIrregular() { Nome = "fazer", Conjugacoes = IrregularesData.Construtor(IrregularesData.fazer) });
            toReturn.Add(new VerboIrregular() { Nome = "feder", Conjugacoes = IrregularesData.Construtor(IrregularesData.feder) });
            toReturn.Add(new VerboIrregular() { Nome = "ferir", Conjugacoes = IrregularesData.Construtor(IrregularesData.ferir) });
            toReturn.Add(new VerboIrregular() { Nome = "frigir", Conjugacoes = IrregularesData.Construtor(IrregularesData.frigir) });
            toReturn.Add(new VerboIrregular() { Nome = "flectir", Conjugacoes = IrregularesData.Construtor(IrregularesData.flectir) });
            //toReturn.Add(new VerboIrregular() { Nome = "fremir", Conjugacoes = IrregularesData.Construtor(IrregularesData.fremir) });
            toReturn.Add(new VerboIrregular() { Nome = "fugir", Conjugacoes = IrregularesData.Construtor(IrregularesData.fugir) });
            //toReturn.Add(new VerboIrregular() { Nome = "fulgir", Conjugacoes = IrregularesData.Construtor(IrregularesData.fulgir) });
            toReturn.Add(new VerboIrregular() { Nome = "haver", Conjugacoes = IrregularesData.Construtor(IrregularesData.haver) });
            toReturn.Add(new VerboIrregular() { Nome = "hebraizar", Conjugacoes = IrregularesData.Construtor(IrregularesData.hebraizar) });
            toReturn.Add(new VerboIrregular() { Nome = "homogeneizar", Conjugacoes = IrregularesData.Construtor(IrregularesData.homogeneizar) });
            toReturn.Add(new VerboIrregular() { Nome = "impedir", Conjugacoes = IrregularesData.Construtor(IrregularesData.impedir) });
            //toReturn.Add(new VerboIrregular() { Nome = "impelir", Conjugacoes = IrregularesData.Construtor(IrregularesData.impelir) });
            toReturn.Add(new VerboIrregular() { Nome = "incendiar", Conjugacoes = IrregularesData.Construtor(IrregularesData.incendiar) });
            toReturn.Add(new VerboIrregular() { Nome = "inflectir", Conjugacoes = IrregularesData.Construtor(IrregularesData.inflectir) });
            toReturn.Add(new VerboIrregular() { Nome = "inquerir", Conjugacoes = IrregularesData.Construtor(IrregularesData.inquerir) });
            toReturn.Add(new VerboIrregular() { Nome = "instruir", Conjugacoes = IrregularesData.Construtor(IrregularesData.instruir) });
            toReturn.Add(new VerboIrregular() { Nome = "intermediar", Conjugacoes = IrregularesData.Construtor(IrregularesData.intermediar) });
            toReturn.Add(new VerboIrregular() { Nome = "intervir", Conjugacoes = IrregularesData.Construtor(IrregularesData.intervir) });
            toReturn.Add(new VerboIrregular() { Nome = "investir", Conjugacoes = IrregularesData.Construtor(IrregularesData.investir) });
            toReturn.Add(new VerboIrregular() { Nome = "ir", Conjugacoes = IrregularesData.Construtor(IrregularesData.ir) });
            toReturn.Add(new VerboIrregular() { Nome = "jazer", Conjugacoes = IrregularesData.Construtor(IrregularesData.jazer) });
            toReturn.Add(new VerboIrregular() { Nome = "judaizar", Conjugacoes = IrregularesData.Construtor(IrregularesData.judaizar) });
            toReturn.Add(new VerboIrregular() { Nome = "ler", Conjugacoes = IrregularesData.Construtor(IrregularesData.ler) });
            toReturn.Add(new VerboIrregular() { Nome = "licenciar", Conjugacoes = IrregularesData.Construtor(IrregularesData.licenciar) });
            toReturn.Add(new VerboIrregular() { Nome = "malquerer", Conjugacoes = IrregularesData.Construtor(IrregularesData.malquerer) });
            toReturn.Add(new VerboIrregular() { Nome = "magoar", Conjugacoes = IrregularesData.Construtor(IrregularesData.magoar) });
            toReturn.Add(new VerboIrregular() { Nome = "manter", Conjugacoes = IrregularesData.Construtor(IrregularesData.manter) });
            toReturn.Add(new VerboIrregular() { Nome = "mediar", Conjugacoes = IrregularesData.Construtor(IrregularesData.mediar) });
            toReturn.Add(new VerboIrregular() { Nome = "medir", Conjugacoes = IrregularesData.Construtor(IrregularesData.medir) });
            toReturn.Add(new VerboIrregular() { Nome = "mentir", Conjugacoes = IrregularesData.Construtor(IrregularesData.mentir) });
            toReturn.Add(new VerboIrregular() { Nome = "minguar", Conjugacoes = IrregularesData.Construtor(IrregularesData.minguar) });
            toReturn.Add(new VerboIrregular() { Nome = "mobiliar", Conjugacoes = IrregularesData.Construtor(IrregularesData.mobiliar) });
            toReturn.Add(new VerboIrregular() { Nome = "moer", Conjugacoes = IrregularesData.Construtor(IrregularesData.moer) });
            toReturn.Add(new VerboIrregular() { Nome = "moscar", Conjugacoes = IrregularesData.Construtor(IrregularesData.moscar) });
            toReturn.Add(new VerboIrregular() { Nome = "mugir", Conjugacoes = IrregularesData.Construtor(IrregularesData.mugir) });
            toReturn.Add(new VerboIrregular() { Nome = "multicolorir", Conjugacoes = IrregularesData.Construtor(IrregularesData.multicolorir) });
            toReturn.Add(new VerboIrregular() { Nome = "negociar", Conjugacoes = IrregularesData.Construtor(IrregularesData.negociar) });
            toReturn.Add(new VerboIrregular() { Nome = "nevar", Conjugacoes = IrregularesData.Construtor(IrregularesData.nevar) });
            toReturn.Add(new VerboIrregular() { Nome = "obliquar", Conjugacoes = IrregularesData.Construtor(IrregularesData.obliquar) });
            toReturn.Add(new VerboIrregular() { Nome = "obsequiar", Conjugacoes = IrregularesData.Construtor(IrregularesData.obsequiar) });
            toReturn.Add(new VerboIrregular() { Nome = "obstruir", Conjugacoes = IrregularesData.Construtor(IrregularesData.obstruir) });
            toReturn.Add(new VerboIrregular() { Nome = "obter", Conjugacoes = IrregularesData.Construtor(IrregularesData.obter) });
            toReturn.Add(new VerboIrregular() { Nome = "odiar", Conjugacoes = IrregularesData.Construtor(IrregularesData.odiar) });
            toReturn.Add(new VerboIrregular() { Nome = "orvalhar", Conjugacoes = IrregularesData.Construtor(IrregularesData.orvalhar) });
            toReturn.Add(new VerboIrregular() { Nome = "ouvir", Conjugacoes = IrregularesData.Construtor(IrregularesData.ouvir) });
            toReturn.Add(new VerboIrregular() { Nome = "parar", Conjugacoes = IrregularesData.Construtor(IrregularesData.parar) });
            toReturn.Add(new VerboIrregular() { Nome = "parir", Conjugacoes = IrregularesData.Construtor(IrregularesData.parir) });
            toReturn.Add(new VerboIrregular() { Nome = "partir", Conjugacoes = IrregularesData.Construtor(IrregularesData.partir) });
            toReturn.Add(new VerboIrregular() { Nome = "passear", Conjugacoes = IrregularesData.Construtor(IrregularesData.passear) });
            toReturn.Add(new VerboIrregular() { Nome = "pedir", Conjugacoes = IrregularesData.Construtor(IrregularesData.pedir) });
            toReturn.Add(new VerboIrregular() { Nome = "perder", Conjugacoes = IrregularesData.Construtor(IrregularesData.perder) });
            toReturn.Add(new VerboIrregular() { Nome = "perseguir", Conjugacoes = IrregularesData.Construtor(IrregularesData.perseguir) });
            toReturn.Add(new VerboIrregular() { Nome = "plebeizar", Conjugacoes = IrregularesData.Construtor(IrregularesData.plebeizar) });
            toReturn.Add(new VerboIrregular() { Nome = "poder", Conjugacoes = IrregularesData.Construtor(IrregularesData.poder) });
            toReturn.Add(new VerboIrregular() { Nome = "polir", Conjugacoes = IrregularesData.Construtor(IrregularesData.polir) });
            toReturn.Add(new VerboIrregular() { Nome = "pôr", Conjugacoes = IrregularesData.Construtor(IrregularesData.por) });
            toReturn.Add(new VerboIrregular() { Nome = "por", Conjugacoes = IrregularesData.Construtor(IrregularesData.por) });
            //toReturn.Add(new VerboIrregular() { Nome = "precaver", Conjugacoes = IrregularesData.Construtor(IrregularesData.precaver) });
            toReturn.Add(new VerboIrregular() { Nome = "premiar", Conjugacoes = IrregularesData.Construtor(IrregularesData.premiar) });
            //toReturn.Add(new VerboIrregular() { Nome = "premir", Conjugacoes = IrregularesData.Construtor(IrregularesData.premir) });
            toReturn.Add(new VerboIrregular() { Nome = "pressentir", Conjugacoes = IrregularesData.Construtor(IrregularesData.pressentir) });
            toReturn.Add(new VerboIrregular() { Nome = "prevenir", Conjugacoes = IrregularesData.Construtor(IrregularesData.prevenir) });
            toReturn.Add(new VerboIrregular() { Nome = "prever", Conjugacoes = IrregularesData.Construtor(IrregularesData.prever) });
            toReturn.Add(new VerboIrregular() { Nome = "progredir", Conjugacoes = IrregularesData.Construtor(IrregularesData.progredir) });
            toReturn.Add(new VerboIrregular() { Nome = "proibir", Conjugacoes = IrregularesData.Construtor(IrregularesData.proibir) });
            toReturn.Add(new VerboIrregular() { Nome = "propor", Conjugacoes = IrregularesData.Construtor(IrregularesData.propor) });
            toReturn.Add(new VerboIrregular() { Nome = "proteger", Conjugacoes = IrregularesData.Construtor(IrregularesData.proteger) });
            toReturn.Add(new VerboIrregular() { Nome = "prosseguir", Conjugacoes = IrregularesData.Construtor(IrregularesData.prosseguir) });
            toReturn.Add(new VerboIrregular() { Nome = "prover", Conjugacoes = IrregularesData.Construtor(IrregularesData.prover) });
            toReturn.Add(new VerboIrregular() { Nome = "provir", Conjugacoes = IrregularesData.Construtor(IrregularesData.provir) });
            toReturn.Add(new VerboIrregular() { Nome = "querer", Conjugacoes = IrregularesData.Construtor(IrregularesData.querer) });
            //toReturn.Add(new VerboIrregular() { Nome = "reaver", Conjugacoes = IrregularesData.Construtor(IrregularesData.reaver) });
            toReturn.Add(new VerboIrregular() { Nome = "rebolir", Conjugacoes = IrregularesData.Construtor(IrregularesData.rebolir) });
            toReturn.Add(new VerboIrregular() { Nome = "rebulir", Conjugacoes = IrregularesData.Construtor(IrregularesData.rebulir) });
            toReturn.Add(new VerboIrregular() { Nome = "reflectir", Conjugacoes = IrregularesData.Construtor(IrregularesData.reflectir) });
            toReturn.Add(new VerboIrregular() { Nome = "refletir", Conjugacoes = IrregularesData.Construtor(IrregularesData.refletir) });
            toReturn.Add(new VerboIrregular() { Nome = "refulgir", Conjugacoes = IrregularesData.Construtor(IrregularesData.refulgir) });
            toReturn.Add(new VerboIrregular() { Nome = "regredir", Conjugacoes = IrregularesData.Construtor(IrregularesData.regredir) });
            toReturn.Add(new VerboIrregular() { Nome = "relampejar", Conjugacoes = IrregularesData.Construtor(IrregularesData.relampejar) });
            //toReturn.Add(new VerboIrregular() { Nome = "remir", Conjugacoes = IrregularesData.Construtor(IrregularesData.remir) });
            toReturn.Add(new VerboIrregular() { Nome = "remoer", Conjugacoes = IrregularesData.Construtor(IrregularesData.remoer) });
            //toReturn.Add(new VerboIrregular() { Nome = "repelir", Conjugacoes = IrregularesData.Construtor(IrregularesData.repelir) });
            toReturn.Add(new VerboIrregular() { Nome = "repetir", Conjugacoes = IrregularesData.Construtor(IrregularesData.repetir) });
            toReturn.Add(new VerboIrregular() { Nome = "requerer", Conjugacoes = IrregularesData.Construtor(IrregularesData.requerer) });
            toReturn.Add(new VerboIrregular() { Nome = "ressentir", Conjugacoes = IrregularesData.Construtor(IrregularesData.ressentir) });
            toReturn.Add(new VerboIrregular() { Nome = "reter", Conjugacoes = IrregularesData.Construtor(IrregularesData.reter) });
            toReturn.Add(new VerboIrregular() { Nome = "resfolegar", Conjugacoes = IrregularesData.Construtor(IrregularesData.resfolegar) });
            //toReturn.Add(new VerboIrregular() { Nome = "ressarcir", Conjugacoes = IrregularesData.Construtor(IrregularesData.ressarcir) });
            toReturn.Add(new VerboIrregular() { Nome = "reunir", Conjugacoes = IrregularesData.Construtor(IrregularesData.reunir) });
            toReturn.Add(new VerboIrregular() { Nome = "rever", Conjugacoes = IrregularesData.Construtor(IrregularesData.rever) });
            toReturn.Add(new VerboIrregular() { Nome = "revir", Conjugacoes = IrregularesData.Construtor(IrregularesData.revir) });
            toReturn.Add(new VerboIrregular() { Nome = "rir", Conjugacoes = IrregularesData.Construtor(IrregularesData.rir) });
            toReturn.Add(new VerboIrregular() { Nome = "roer", Conjugacoes = IrregularesData.Construtor(IrregularesData.roer) });
            toReturn.Add(new VerboIrregular() { Nome = "rugir", Conjugacoes = IrregularesData.Construtor(IrregularesData.rugir) });
            //toReturn.Add(new VerboIrregular() { Nome = "ruir", Conjugacoes = IrregularesData.Construtor(IrregularesData.ruir) });
            toReturn.Add(new VerboIrregular() { Nome = "saber", Conjugacoes = IrregularesData.Construtor(IrregularesData.saber) });
            toReturn.Add(new VerboIrregular() { Nome = "sair", Conjugacoes = IrregularesData.Construtor(IrregularesData.sair) });
            toReturn.Add(new VerboIrregular() { Nome = "saudar", Conjugacoes = IrregularesData.Construtor(IrregularesData.saudar) });
            toReturn.Add(new VerboIrregular() { Nome = "seguir", Conjugacoes = IrregularesData.Construtor(IrregularesData.seguir) });
            toReturn.Add(new VerboIrregular() { Nome = "sentir", Conjugacoes = IrregularesData.Construtor(IrregularesData.sentir) });
            toReturn.Add(new VerboIrregular() { Nome = "ser", Conjugacoes = IrregularesData.Construtor(IrregularesData.ser) });
            toReturn.Add(new VerboIrregular() { Nome = "servir", Conjugacoes = IrregularesData.Construtor(IrregularesData.servir) });
            toReturn.Add(new VerboIrregular() { Nome = "sorrir", Conjugacoes = IrregularesData.Construtor(IrregularesData.sorrir) });
            toReturn.Add(new VerboIrregular() { Nome = "sortir", Conjugacoes = IrregularesData.Construtor(IrregularesData.sortir) });
            toReturn.Add(new VerboIrregular() { Nome = "subir", Conjugacoes = IrregularesData.Construtor(IrregularesData.subir) });
            toReturn.Add(new VerboIrregular() { Nome = "sumir", Conjugacoes = IrregularesData.Construtor(IrregularesData.sumir) });
            //toReturn.Add(new VerboIrregular() { Nome = "surtir", Conjugacoes = IrregularesData.Construtor(IrregularesData.surtir) });
            toReturn.Add(new VerboIrregular() { Nome = "suster", Conjugacoes = IrregularesData.Construtor(IrregularesData.suster) });
            toReturn.Add(new VerboIrregular() { Nome = "ter", Conjugacoes = IrregularesData.Construtor(IrregularesData.ter) });
            toReturn.Add(new VerboIrregular() { Nome = "tossir", Conjugacoes = IrregularesData.Construtor(IrregularesData.tossir) });
            toReturn.Add(new VerboIrregular() { Nome = "traduzir", Conjugacoes = IrregularesData.Construtor(IrregularesData.traduzir) });
            toReturn.Add(new VerboIrregular() { Nome = "transgredir", Conjugacoes = IrregularesData.Construtor(IrregularesData.transgredir) });
            toReturn.Add(new VerboIrregular() { Nome = "trazer", Conjugacoes = IrregularesData.Construtor(IrregularesData.trazer) });
            toReturn.Add(new VerboIrregular() { Nome = "trovejar", Conjugacoes = IrregularesData.Construtor(IrregularesData.trovejar) });
            toReturn.Add(new VerboIrregular() { Nome = "tugir", Conjugacoes = IrregularesData.Construtor(IrregularesData.tugir) });
            //toReturn.Add(new VerboIrregular() { Nome = "urgir", Conjugacoes = IrregularesData.Construtor(IrregularesData.urgir) });
            toReturn.Add(new VerboIrregular() { Nome = "valer", Conjugacoes = IrregularesData.Construtor(IrregularesData.valer) });
            toReturn.Add(new VerboIrregular() { Nome = "vender", Conjugacoes = IrregularesData.Construtor(IrregularesData.vender) });
            toReturn.Add(new VerboIrregular() { Nome = "ventar", Conjugacoes = IrregularesData.Construtor(IrregularesData.ventar) });
            toReturn.Add(new VerboIrregular() { Nome = "ver", Conjugacoes = IrregularesData.Construtor(IrregularesData.ver) });
            toReturn.Add(new VerboIrregular() { Nome = "vestir", Conjugacoes = IrregularesData.Construtor(IrregularesData.vestir) });
            toReturn.Add(new VerboIrregular() { Nome = "viuvar", Conjugacoes = IrregularesData.Construtor(IrregularesData.viuvar) });

            return toReturn;
        }
    }
}
