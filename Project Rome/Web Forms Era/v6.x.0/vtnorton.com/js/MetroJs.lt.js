$.fn.metrojs = {}; $.fn.metrojs.preloadImages = function (e) { var t = $(this).toArray(); var n = $("<img style='display:none;'>").appendTo("body"); $(this).each(function () { n.attr({ src: this }).load(function () { var n = $(this).attr("src"); for (var r = 0; r < t.length; r++) { if (t[r] == element) { t.splice(r, 1) } } if (t.length == 0) { e() } }) }); n.remove() }; (function (e) { e.fn.liveTile = function (t) { if (n[t]) { var r = []; for (var i = 1; i <= arguments.length; i++) { r[i - 1] = arguments[i] } return n[t].apply(this, r) } else if (typeof t === "object" || !t) { return n.init.apply(this, arguments) } else { e.error("Method " + t + " does not exist on jQuery.liveTile") } }; e.fn.liveTile.State = { RUNNING: "running", STOPPED: "stopped" }; e.fn.liveTile.defaults = { mode: "slide", speed: 500, initDelay: -1, delay: 5e3, stops: "100%", stack: false, direction: "vertical", tileCssSelector: ">div,>li", listTileCssSelector: ">div,>p,>img,>a", imageCssSelector: ">img,>a>img", ignoreDataAttributes: false, pauseOnHover: false, repeatCount: -1, animationComplete: function (e, t, n) { }, preloadImages: false, fadeSlideSwap: false, appendBack: true, triggerDelay: function (e) { return Math.random() * 3e3 }, alwaysTrigger: false, frontImages: null, frontIsRandom: true, frontIsBackgroundImage: false, frontIsInGrid: false, backImages: null, backIsRandom: true, backIsBackgroundImage: false, backIsInInGrid: false, flipListOnHover: false, useModernizr: typeof window.Modernizr != "undefined", useHardwareAccel: true, $front: null, $back: null }; var t = { shuffleArray: function (e) { var t = []; while (e.length) t.push(e.splice(Math.random() * e.length, 1)); while (t.length) e.push(t.pop()); return e }, setTimer: function (e, t) { return setInterval(e, t) }, stopTimer: function (e) { clearInterval(e); return null }, setExtraProperties: function (e, t) { if (typeof t.alt != "undefined") e.attr("alt", t.alt); var n = e.parent(); if (typeof t.href != "undefined" && n[0].tagName == "A") { n.attr("href", t.href); if (typeof t.target != "undefined") n.attr("target", t.target); if (typeof t.onclick != "undefined") { n.attr("onclick", t.onclick); e.attr("onclick", "") } } else { if (typeof t.onclick != "undefined") e.attr("onclick", t.onclick) } }, handleListItemSwap: function (e, n, r, i) { var s = e.find(i.imageCssSelector); if (!r) { s.attr("src", n.src) } else { s.css({ backgroundImage: "url('" + n.src + "')" }) } t.setExtraProperties(s, n) }, handleSlide: function (e, n, r, i, s) { if (!e && r) { var o; var u = n.find(i.imageCssSelector); o = i.frontImages[s]; if (i.fadeSlideSwap == true) { u.fadeOut(function () { u.attr("src", o.src); t.setExtraProperties(u, o); u.fadeIn() }) } else { u.attr("src", o.src); t.setExtraProperties(u, o) } } }, handleSwap: function (e, n, r, i) { var s = t.getImage(n, r, i); var o = e.find(r.imageCssSelector); o.attr("src", s.src); t.setExtraProperties(o, s) }, getImage: function (e, t, n) { var r = e ? t.frontImages : t.backImages; var i; i = r[Math.min(n, r.length - 1)]; return i } }; var n = { init: function (n) { var r = {}; e.extend(r, e.fn.liveTile.defaults, n); var i = typeof r.frontImages == "object" && r.frontImages instanceof Array && r.frontImages.length > 0; var s = typeof r.backImages == "object" && r.backImages instanceof Array && r.backImages.length > 0; var o = false; var u = false; var a = false; var f = false; var l = r.useHardwareAccel; if (r.useHardwareAccel == true) { if (r.useModernizr == false) { if (typeof window.MetroModernizr != "undefined") { o = window.MetroModernizr.canTransform; u = window.MetroModernizr.canTransition; a = window.MetroModernizr.canTransform3d; f = window.MetroModernizr.canAnimate } else { window.MetroModernizr = {}; var c = "metromodernizr"; var h = document.documentElement; var p = document.head || document.getElementsByTagName("head")[0]; var d = document.createElement(c); var v = d.style; var m = " -webkit- -moz- -o- -ms- -khtml- ".split(" "); var g = "Webkit Moz O ms Khtml".split(" "); var y = function (e, t) { for (var n in e) { if (v[e[n]] !== undefined && (!t || t(e[n], d))) { return true } } }; var b = function (e, t) { var n = e.charAt(0).toUpperCase() + e.substr(1), r = (e + " " + g.join(n + " ") + n).split(" "); return !!y(r, t) }; var w = function () { var e = !!y(["perspectiveProperty", "WebkitPerspective", "MozPerspective", "OPerspective", "msPerspective"]); if (e && "webkitPerspective" in h.style) { e = E("@media (" + m.join("transform-3d),(") + "metromodernizr)") } return e }; var E = function (e) { var t = document.createElement("style"), n = document.createElement("div"), r; t.textContent = e + "{#metromodernizr{height:3px}}"; p.appendChild(t); n.id = "metromodernizr"; h.appendChild(n); r = n.offsetHeight === 3; t.parentNode.removeChild(t); n.parentNode.removeChild(n); return !!r }; o = !!y(["transformProperty", "WebkitTransform", "MozTransform", "OTransform", "msTransform"]); u = b("transitionProperty"); a = w(); f = b("animationName"); window.MetroModernizr.canTransform = o; window.MetroModernizr.canTransition = u; window.MetroModernizr.canTransform3d = a; window.MetroModernizr.canAnimate = f; h = null; p = null; d = null; v = null } } else { o = e("html").hasClass("csstransforms"); u = e("html").hasClass("csstransitions"); a = e("html").hasClass("csstransforms3d"); f = e("html").hasClass("cssanimations") } } l = l && f && o && a; if (r.preloadImages) { if (i) e(r.frontImages).metrojs.preloadImages(function () { }); if (s) e(r.backImages).metrojs.preloadImages(function () { }) } return e(this).each(function (n) { var o = e(this); o.slideTimer = null; var a = {}; a.state = o.slideTimer == null ? e.fn.liveTile.State.STOPPED : e.fn.liveTile.State.RUNNING; a.speed = !r.ignoreDataAttributes && typeof o.data("speed") != "undefined" ? o.data("speed") : r.speed; a.delay = !r.ignoreDataAttributes && typeof o.data("delay") != "undefined" ? o.data("delay") : r.delay; if (a.delay < -1) a.delay = r.triggerDelay(n); else if (a.delay < 0) a.delay = 3500 + Math.random() * 4501; a.stops = !r.ignoreDataAttributes && typeof o.data("stops") != "undefined" ? o.data("stops") : r.stops; a.stack = !r.ignoreDataAttributes && typeof o.data("stack") != "undefined" ? o.data("stack") : r.mode; a.mode = !r.ignoreDataAttributes && typeof o.data("mode") != "undefined" ? o.data("mode") : r.mode; a.direction = !r.ignoreDataAttributes && typeof o.data("direction") != "undefined" ? o.data("direction") : r.direction; a.useHwAccel = !r.ignoreDataAttributes && typeof o.data("ha") != "undefined" ? o.data("ha") : r.useHardwareAccel; a.initDelay = !r.ignoreDataAttributes && typeof o.data("initdelay") != "undefined" ? o.data("initdelay") : r.initDelay < 0 ? a.delay : r.initDelay; a.repeatCount = !r.ignoreDataAttributes && typeof o.data("repeat") != "undefined" ? o.data("repeat") : r.repeatCount; a.hasRun = false; a.loopCount = 0; a.slideIndex = 0; a.stops = typeof r.stops == "object" && r.stops instanceof Array ? r.stops : ("" + a.stops).split(","); o.addClass(a.mode); var f = o.find(r.tileCssSelector); var c = null; if (r.$front != null && r.$front.length > 0) { c = a.mode == "flip-list" ? null : a.mode == "slide" ? r.$front.addClass("slide-front") : r.$front.addClass("flip-front") } else { c = a.mode == "flip-list" ? null : a.mode == "slide" ? f.first().addClass("slide-front") : f.first().addClass("flip-front") } var h = a.mode == "slide" ? "slide-back" : "flip-back"; var p = null; if (r.$back != null && r.$back.length > 0) { p = a.mode == "flip-list" ? null : r.$back.addClass(h) } else { p = a.mode == "flip-list" ? null : f.length > 1 ? f.last().addClass(h) : r.appendBack == true ? e('<div class="' + h + '"></div>').appendTo(o) : e("<div></div>") } var d = o.height(); var v = o.width(); var m = a.direction == "vertical" ? d / 2 : v / 2; var g = false; var y = 0; var b = 0; var w = 0; var E = false; var S = []; var x = []; var T = -1; var N = []; var C = -1; if (r.pauseOnHover) { o.find(r.tileCssSelector).hover(function () { a.stopTimer(false) }, function () { a.setTimer() }) } if (a.mode == "flip-list") { o.find(r.tileCssSelector).each(function () { var t = e(this); var n = r.$front != null ? r.$front : t.find(r.listTileCssSelector).first().addClass("flip-front"); if (t.find(r.listTileCssSelector).length == 1 && r.appendBack == true) { t.append("<div></div>") } var i = r.$back != null ? r.$back : t.find(r.listTileCssSelector).last().addClass("flip-back").css({ marginTop: "0px" }); if (l && a.useHwAccel) { t.addClass("ha"); n.addClass("ha").data("tile", { animating: false }); i.addClass("ha").data("tile", { animating: false }); if (r.flipListOnHover == true) { n.bind("mouseout.liveTile", null, function () { o.flipListItem(false, t, i, n) }); i.bind("mouseout.liveTile", null, function () { o.flipListItem(true, t, n, i) }) } } else { if (r.flipListOnHover == true) { n.bind("mouseout.liveTile", function () { o.flipListItem(true, t, n, i) }); i.bind("mouseout.liveTile", function () { o.flipListItem(false, t, i, n) }) } } }) } else if (a.mode == "slide") { if (a.stack == true) { if (a.direction == "vertical") { p.css({ top: -d + "px" }) } else { p.css({ left: -v + "px" }) } } if (u && a.useHwAccel) { o.addClass("ha"); c.addClass("ha").data("tile", { animating: false }) } } else if (a.mode == "flip") { if (l && a.useHwAccel) { o.addClass("ha"); c.addClass("ha").data("tile", { animating: false }); p.addClass("ha").data("tile", { animating: false }) } else { var k = a.direction == "vertical" ? { height: "0px", width: v + "px", marginTop: m + "px", opacity: "0" } : { height: "100%", width: "0px !important", marginLeft: m + "px", opacity: "0" }; var L = a.direction == "vertical" ? { height: "100%", width: "100%", marginTop: "0px", opacity: "1" } : { height: "100%", width: "100%", marginLeft: "0px", opacity: "1" }; p.css(k); c.css(L); if (a.repeatCount > -1 && e.browser.msie) { a.repeatCount += 1 } } } o.slide = function (n) { if (typeof n == "undefined" || n == null) n = null; if (a.repeatCount > -1) { if (a.loopCount > a.repeatCount) { a.stopTimer(false); a.loopCount = 0; a.hasRun = false; o.data("LiveTile", a); return } } if (!E) return; var s = g; var f = c.data("tile"); var l = e.trim(a.stops[a.slideIndex]); var h = l.indexOf("px"); var m = 0; var b = 0; var w = a.direction == "vertical" ? d : v; var S = a.direction == "vertical" ? "top" : "left"; if (h > 0) { b = parseInt(l.substring(0, h)); m = b - w + "px" } else { b = parseInt(l.replace("%", "")); m = b - 100 + "%" } if (u && a.useHwAccel) { if (typeof f.animated != "undefined" && f.animated == true) return; f.animated = true; var N = { WebkitTransitionProperty: S, WebkitTransitionDuration: a.speed + "ms", MozTransitionProperty: S, MozTransitionDuration: a.speed + "ms", OTransitionProperty: S, OTransitionDuration: a.speed + "ms", msTransitionProperty: S, msTransitionDuration: a.speed + "ms", KhtmlTransitionProperty: S, KhtmlTransitionDuration: a.speed + "ms", TransitionProperty: S, TransitionDuration: a.speed + "ms" }; if (a.direction == "vertical") { N.top = s && a.stops.length == 1 ? "0px" : l } else { N.left = s && a.stops.length == 1 ? "0px" : l } c.css(N); if (a.stack == true) { if (a.direction == "vertical") { N.top = s && a.stops.length == 1 ? -w + "px" : m } else { N.left = s && a.stops.length == 1 ? -w + "px" : m } p.css(N) } window.setTimeout(function () { var e = y; if (i && r.frontIsRandom) { if (x.length == 0) { for (var o = 0; o < r.frontImages.length; o++) { if (o != C || r.frontImages.length == 1) x[o] = o } x = t.shuffleArray(x) } e = x.pop(); T = e } t.handleSlide(s, c, i, r, e); f.animated = false; c.data("tile", f); if (!s && i) { y += 1; if (y >= r.frontImages.length) y = 0 } r.animationComplete(a, c, p); if (n != null) n() }, a.speed) } else { if (c.is(":animated")) { return } var k = a.direction == "vertical" ? { top: s && a.stops.length == 1 ? "0px" : l } : { left: s && a.stops.length == 1 ? "0px" : l }; var L = a.direction == "vertical" ? { top: s && a.stops.length == 1 ? -w + "px" : m } : { left: s && a.stops.length == 1 ? -w + "px" : m }; c.animate(k, a.speed, function () { var e = y; if (i && r.frontIsRandom) { if (x.length == 0) { for (var o = 0; o < r.frontImages.length; o++) { if (o != C || r.frontImages.length == 1) x[o] = o } x = t.shuffleArray(x) } e = x.pop(); T = e } t.handleSlide(s, c, i, r, e); if (!s && i) { y += 1; if (y >= r.frontImages.length) y = 0 } r.animationComplete(a, c, p); if (n != null) n() }); if (a.stack == true) { p.animate(L, a.speed, function () { }) } } a.slideIndex += 1; if (a.slideIndex >= a.stops.length) { a.slideIndex = 0; g = !g; a.loopCount += 1 } }; o.flip = function (n) { if (typeof n == "undefined" || n == null) n = null; if (a.repeatCount > -1) { if (a.loopCount > a.repeatCount) { a.stopTimer(false); a.loopCount = 0; if (e.browser.msie) a.loopCount += 1; a.hasRun = false; o.data("LiveTile", a); return } else { a.loopCount += 1 } } if (l && a.useHwAccel) { var u = a.speed * 2; var f = u + "ms"; var h = a.direction == "vertical" ? "flipfront180" : "flipfrontY180"; var d = a.direction == "vertical" ? "flipback180" : "flipbackY180"; var v = c.data("tile"); if (typeof v.animated != "undefined" && v.animated == true) { return } v.animated = true; if (E) { if (g) { var y = { WebkitAnimationPlayState: "running", WebkitAnimationName: d, WebkitAnimationDuration: f, MozAnimationPlayState: "running", MozAnimationName: d, MozAnimationDuration: f, OAnimationPlayState: "running", OAnimationName: d, OAnimationDuration: f, msAnimationPlayState: "running", msAnimationName: d, msAnimationDuration: f, AnimationPlayState: "running", AnimationName: d, AnimationDuration: f }; c.css(y).data("tile", v); y.WebkitAnimationName = h; y.MozAnimationName = h; y.msAnimationName = h; y.OAnimationName = h; y.AnimationName = h; p.css(y).data("tile", v); window.setTimeout(function () { if (s) { var e = r.backIsRandom; var i = b; if (e) { if (N.length == 0) { for (var o = 0; o < r.backImages.length; o++) { if (o != C || r.backImages.length == 1) N[o] = o } N = t.shuffleArray(N) } i = N.pop(); C = i } t.handleSwap(p, false, r, i); b += 1; if (b >= r.backImages.length) { b = 0 } } r.animationComplete(a, c, p); if (n != null) n(); v.animated = false; c.data("tile", v); p.data("tile", v) }, u) } else { var S = { WebkitAnimationPlayState: "running", WebkitAnimationName: h, WebkitAnimationDuration: f, MozAnimationPlayState: "running", MozAnimationName: h, MozAnimationDuration: f, OAnimationPlayState: "running", OAnimationName: h, OAnimationDuration: f, msAnimationPlayState: "running", msAnimationName: h, msAnimationDuration: f, AnimationPlayState: "running", AnimationName: h, AnimationDuration: f }; c.css(S).data("tile", v); S.WebkitAnimationName = d; S.MozAnimationName = d; S.msAnimationName = d; S.OAnimationName = d; S.AnimationName = d; p.css(S).data("tile", v); window.setTimeout(function () { if (i) { var e = r.frontIsRandom; var s = w; if (e) { if (x.length == 0) { for (var o = 0; o < r.frontImages.length; o++) { if (o != C || r.frontImages.length == 1) x[o] = o } x = t.shuffleArray(x) } s = x.pop(); T = s } t.handleSwap(c, true, r, s); w += 1; if (w >= r.frontImages.length) { w = 0 } } r.animationComplete(a, p, c); if (n != null) { n() } v.animated = false; c.data("tile", v); p.data("tile", v) }, u) } } g = !g } else { if (g) { var k = a.direction == "vertical" ? { height: "0px", width: "100%", marginTop: m + "px", opacity: "0" } : { height: "100%", width: "0px", marginLeft: m + "px", opacity: "0" }; var L = a.direction == "vertical" ? { height: "100%", width: "100%", marginTop: "0px", opacity: "1" } : { height: "100%", width: "100%", marginLeft: "0px", opacity: "1" }; c.stop().animate(k, { duration: a.speed }); window.setTimeout(function () { p.stop().animate(L, { duration: a.speed }); if (i) { var e = r.frontIsRandom; var s = w; if (e) { if (x.length == 0) { for (var o = 0; o < r.frontImages.length; o++) { if (o != T || r.frontImages.length == 1) x[o] = o } x = t.shuffleArray(x) } s = x.pop(); T = s } t.handleSwap(c, true, r, s); w += 1; if (w >= r.frontImages.length) { w = 0 } } g = !g; r.animationComplete(a, p, c); if (n != null) n() }, a.speed) } else { var A = a.direction == "vertical" ? { height: "0px", width: "100%", marginTop: m + "px", opacity: "0" } : { height: "100%", width: "0px", marginLeft: m + "px", opacity: "0" }; var O = a.direction == "vertical" ? { height: "100%", width: "100%", marginTop: "0px", opacity: "1" } : { height: "100%", width: "100%", marginLeft: "0px", opacity: "1" }; p.stop().animate(A, { duration: a.speed }); window.setTimeout(function () { c.stop().animate(O, { duration: a.speed }); if (s) { var e = r.backIsRandom; var i = b; if (e) { if (N.length == 0) { for (var o = 0; o < r.backImages.length; o++) { if (o != C || r.backImages.length == 1) N[o] = o } N = t.shuffleArray(N) } i = N.pop(); C = i } t.handleSwap(p, false, r, i); b += 1; if (b >= r.backImages.length) { b = 0 } } g = !g; r.animationComplete(a, c, p); if (n != null) n() }, a.speed) } } }; o.flipList = function (n) { if (typeof n == "undefined" || n == null) n = null; if (a.repeatCount > -1) { if (a.loopCount > a.repeatCount) { a.stopTimer(false); a.loopCount = 0; a.hasRun = false; o.data("LiveTile", a); return } else { a.loopCount += 1 } } var u = []; var f = []; var l = o.find(r.tileCssSelector); var c = 0; if (i) { if (x.length == 0) { for (var h = 0; h < r.frontImages.length; h++) { if (h != T || r.frontImages.length == 1) x[h] = h } x = t.shuffleArray(x) } c = x.pop(); T = c } var p = 0; if (s) { if (N.length == 0) { for (var h = 0; h < r.backImages.length; h++) { if (h != C || r.backImages.length == 1) N[h] = h } N = t.shuffleArray(N) } p = N.pop(); C = p } l.each(function (n) { var l = e(this); if (S.length < n + 1) { var h = {}; h.$front = l.find(r.listTileCssSelector).first(); h.$back = l.find(r.listTileCssSelector).last(); h.isReversed = false; S[n] = h } var d = S[n].$front; var v = S[n].$back; var m = r.triggerDelay(n); var g = m > 0 ? a.speed + m : a.speed; var y = r.alwaysTrigger == false ? Math.random() * 351 > 150 ? true : false : true; var b; if (S[n].isReversed) { if (y) { window.setTimeout(function () { S[n].isReversed = false; if (!i) { o.flipListItem(true, l, d, v) } else { var e = r.frontIsRandom; var s = r.frontIsInGrid; var a = r.frontIsBackgroundImage; var f = r.frontImages; if (e && !s) { if (u.length == 0) { for (var h = 0; h < r.frontImages.length; h++) { u[h] = h } u = t.shuffleArray(u) } b = f[u.pop()] } else { if (!s) { b = f[Math.min(n, f.length)] } else { b = f[Math.min(c, f.length)] } } o.flipListItem(true, l, d, v, b, a) } }, g) } } else { if (y) { window.setTimeout(function () { S[n].isReversed = true; if (!s) { o.flipListItem(false, l, v, d) } else { var e = r.backIsRandom; var i = r.backIsInGrid; var u = r.backIsBackgroundImage; var a = r.backImages; if (e && !i) { if (f.length == 0) { for (var c = 0; c < r.backImages.length; c++) { f[c] = c } f = t.shuffleArray(f) } b = a[f.pop()] } else { if (!i) { b = a[Math.min(n, a.length)] } else { b = a[Math.min(p, a.length)] } } o.flipListItem(false, l, v, d, b, u) } }, g) } } }); window.setTimeout(function () { g = !g }, a.speed) }; o.flipListItem = function (e, n, i, s, o, u) { var f = !r.ignoreDataAttributes && typeof n.data("direction") != "undefined" ? n.data("direction") : a.direction; if (l && a.useHwAccel) { u = e ? r.frontIsBackgroundImage : r.backIsBackgroundImage; var c = e ? i.data("tile").animating : s.data("tile").animating; if (c == true) { return } var h = a.speed * 2; var p = h + "ms"; var d = f == "vertical" ? "flipfront180" : "flipfrontY180"; var v = f == "vertical" ? "flipback180" : "flipbackY180"; var m = { WebkitAnimationPlayState: "running", WebkitAnimationName: v, WebkitAnimationDuration: p, MozAnimationPlayState: "running", MozAnimationName: v, MozAnimationDuration: p, msAnimationPlayState: "running", msAnimationName: v, msAnimationDuration: p, OAnimationPlayState: "running", OAnimationName: v, OAnimationDuration: p, AnimationPlayState: "running", AnimationName: v, AnimationDuration: p }; var g = { WebkitAnimationPlayState: "running", WebkitAnimationName: d, WebkitAnimationDuration: p, MozAnimationPlayState: "running", MozAnimationName: d, MozAnimationDuration: p, msAnimationPlayState: "running", msAnimationName: d, msAnimationDuration: p, OAnimationPlayState: "running", OAnimationName: d, OAnimationDuration: p, AnimationPlayState: "running", AnimationName: d, AnimationDuration: p }; i.css(m).data("tile").animating = true; s.css(g).data("tile").animating = true; window.setTimeout(function () { if (typeof o != "undefined") { t.handleListItemSwap(i, o, u, r) } i.data("tile").animating = false; s.data("tile").animating = false }, 0) } else { var y = n.height(); var b = n.width(); var w = f == "vertical" ? y / 2 : b / 2; var E = f == "vertical" ? { height: "0px", width: "100%", marginTop: w + "px", opacity: 0 } : { height: "100%", width: "0px", marginLeft: w + "px", opacity: 0 }; var S = f == "vertical" ? { height: "100%", width: "100%", marginTop: "0px", opacity: 1 } : { height: "100%", width: "100%", marginLeft: "0px", opacity: 1 }; i.stop().animate(E, { duration: a.speed }); window.setTimeout(function () { s.stop().animate(S, { duration: a.speed }); if (typeof o != "undefined") { t.handleListItemSwap(i, o, u, r) } }, a.speed) } }; a.doAction = function () { var e = null; a.stopTimer(false); switch (a.mode) { case "slide": e = o.slide; break; case "flip": e = o.flip; break; case "flip-list": e = o.flipList; break } var t = function () { a.setTimer() }; if (e != null) { E = true; e(t) } }; a.setTimer = function () { var e = null; switch (a.mode) { case "slide": e = o.slide; break; case "flip": e = o.flip; break; case "flip-list": e = o.flipList; break } if (e != null) { if (a.hasRun == false) { window.setTimeout(function () { E = true; e(); a.setTimer() }, a.initDelay) } else { if (o.slideTimer != null) o.slideTimer = t.stopTimer(o.slideTimer); o.slideTimer = t.setTimer(function () { E = true; e() }, a.speed + a.delay) } } a.hasRun = true }; a.stopTimer = function (e) { o.slideTimer = t.stopTimer(o.slideTimer); E = false; if (typeof e != "undefined" && e == true) { a.setTimer() } }; o.data("LiveTile", a); a.setTimer() }) }, animate: function () { e(this).each(function () { var t = e(this).data("LiveTile"); t.doAction() }) }, destroy: function () { e(this).each(function () { var t = e(this); t.unbind(".liveTile"); var n = e(this).data("LiveTile"); if (n != null) { n.stopTimer(false); t.removeData("LiveTile"); t.removeData("ha"); t.removeData("tile"); delete n; delete t.slide; delete t.flip; delete t.flipList; delete t.liveTile } }) }, stop: function (t) { e(this).each(function () { var n = e(this).data("LiveTile"); n.stopTimer(t); n.loopCount = 0; n.hasRun = false }) }, pause: function () { e(this).each(function () { e(this).data("LiveTile").stopTimer() }) }, play: function () { e(this).each(function () { e(this).data("LiveTile").setTimer() }) } } })(jQuery)